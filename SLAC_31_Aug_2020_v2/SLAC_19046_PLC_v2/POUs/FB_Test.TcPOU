<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="FB_Test" Id="{2de176e6-6bae-44e9-9f5f-0ebe69940477}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Test


VAR_INPUT
	fTargetVelocity: LREAL := 0.1;
	fPositionDelta:LREAL := 0.009;
	fStartPosition: LREAL := 0; //Negative
	fEndPosition: LREAL := 0; //Positive
	nDivisions: int := 1;
	bRunAll:BOOL:=FALSE;
END_VAR



VAR_IN_OUT
	axis: AXIS_REF;
	fbAxisPower: MC_Power;
	
END_VAR

VAR
	
	fbAxisMoveAbsolute: MC_MoveAbsolute;
	
	
	bMove: BOOL := FALSE;
	fTargetPosition: LREAL := 0;
	rActPosLimBwd_AirPitch: LREAL;
	rSetPosLimBwd_AirPitch: LREAL;
	step: INT;


	fOverride: LREAL := 100;
	bEnable: BOOL := FALSE;
	nStep: int := 0; // set to 1 to start the step test, 7 full stroke, 20 HL rep test, 30 LL rep test
	nCount: int := 0;
	fPositionInc: LREAL;
	
	tWait: TON;
	tTimeout: TON; //timeout
	bError:BOOL :=FALSE;
	bTestComplete:BOOL:=FALSE;
	rMinPosDiff: LREAL :=1000;
	fMaxPosDiff: LREAL:=-1000;
	
	rActPosLimFwd:LREAL; //save the actual motor position
	rActPosLimBwd:LREAL;
	
	rEncPosLimFwd:ULINT; //save the actual motor position
	rEncPosLimBwd:ULINT;
	
	rSetPosLimFwd:LREAL; //save the set motor position
	rSetPosLimBwd:LREAL;
	
	aPosLimFwd: ARRAY[1..5] OF LREAL;
	aPosLimBwd: ARRAY[1..5] OF LREAL;
	aEncLimFwd: ARRAY[1..5] OF ULINT;
	aEncLimBwd: ARRAY[1..5] OF ULINT;
	index:int:=0;
	
	ftLimFwd :F_TRIG; //detect falling edge on the limit switch
	ftLimBwd :F_TRIG;
	
	nMotorLoad AT %I*: UINT; //default Info data 1
	nMotorCurrent AT %I*: UINT;//default info data 2
	nEncoderCount AT %I*: ULINT;
	
	fbScopeServerControl: FB_ScopeServerControl;
   eReqState: E_ScopeServerState := SCOPE_SERVER_IDLE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[axis.ReadStatus();




fbAxisMoveAbsolute(
	Axis:= axis,
	Execute:= bMove,
	Position:= fTargetPosition,
	Velocity:= fTargetVelocity,
	Acceleration:= ,
	Deceleration:= ,
	Jerk:= ,
	BufferMode:= ,
	Options:= ,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );
	
	
	CASE nStep OF
		
		0: 
			bEnable:=FALSE;
			bMove:=FALSE;
			nCount:=0;
			IF (nDivisions <> 0) THEN
				fPositionInc := (fEndPosition -fStartPosition) /nDivisions;
			END_IF
			//eReqState:= E_ScopeServerState.SCOPE_SERVER_STOP;
			 

		1:
			eReqState:= E_ScopeServerState.SCOPE_SERVER_CONNECT;
			eReqState:= E_ScopeServerState.SCOPE_SERVER_START;
			bTestComplete := FALSE;
			bError:=FALSE;
			bEnable:= TRUE;
			IF (fbAxisPower.Status) THEN
				nStep:=nStep+1;
			END_IF;
			
			
		2:
			fTargetPosition := fStartPosition;
			bMove:= TRUE;
			nStep:=nStep+1;
			IF fbAxisMoveAbsolute.Active THEN
				bMove:=FALSE;
				nStep:=nStep+1;
			END_IF
			
		3:
			IF (*fbAxisMoveAbsolute.Done AND*) tWait.Q (*(axis.Status.InTargetPosition)*) OR NOT fbAxisPower.Enable_Positive  THEN
				fTargetPosition := fbAxisMoveAbsolute.Position + fPositionInc;
				nStep:=nStep+1;
				bMove:=FALSE;
				IF ( fTargetPosition > fEndPosition )  THEN 
				fTargetPosition:= fEndPosition;
				END_IF
			END_IF
			IF (axis.NcToPlc.ActPos >= fEndPosition-fPositionDelta) THEN 
					nStep:=5;
			END_IF
			//IF (fbAxisMoveAbsolute.Error) THEN
			//	nStep:=999;
			//END_IF
		
		4:
			bMove:= TRUE;
			IF fbAxisMoveAbsolute.Active THEN
				bMove:=FALSE;
				nStep:=3;	
			
			END_IF
		
			
		5:
			IF (*fbAxisMoveAbsolute.Done AND*) tWait.Q (* (axis.Status.InTargetPosition)*) THEN
				fTargetPosition := fbAxisMoveAbsolute.Position - fPositionInc;
				nStep:=nStep+1;
				bMove:=FALSE;
				IF ( fTargetPosition < fStartPosition )  THEN 
				fTargetPosition:= fStartPosition;
				END_IF
			END_IF
			IF (axis.NcToPlc.ActPos <= fStartPosition+fPositionDelta) THEN
				IF NOT(bRunAll) THEN nStep:=0; ELSE nStep:=7; END_IF
				bTestComplete := TRUE;
			END_IF
		
		6:
			bMove:= TRUE;
			IF fbAxisMoveAbsolute.Active THEN
				bMove:=FALSE;
				nStep:=5;	
			END_IF
			
		7: // Full stroke, the stage is back to the start position, move to the end position
			bTestComplete := FALSE;
			bError:=FALSE;
			fTargetPosition := fEndPosition;
			bMove:= TRUE;
			IF fbAxisMoveAbsolute.Active OR (axis.NcToPlc.ActPos >= fEndPosition-fPositionDelta)THEN
				bMove:=FALSE;
				nStep:=nStep+1;
			END_IF
		8: // wait until the stage is at the end position then set position to start position
		  IF (*fbAxisMoveAbsolute.Done AND*) tWait.Q (*(axis.Status.InTargetPosition)*) OR (axis.NcToPlc.ActPos >= fEndPosition-fPositionDelta) THEN
				fTargetPosition := fStartPosition;
				nStep:=nStep+1;
				bMove:=FALSE;
			END_IF
		9: //Activate move
			bMove:= TRUE;
			IF fbAxisMoveAbsolute.Active THEN
				bMove:=FALSE;
				nStep:=nStep+1;	
			END_IF
		 10:// wait until the stage reaches the start position
		   IF (*fbAxisMoveAbsolute.Done AND*) tWait.Q (*(axis.Status.InTargetPosition)*) THEN
				fTargetPosition := fStartPosition;
				IF NOT(bRunAll) THEN nStep:=0; ELSE nStep:=20; END_IF
				bTestComplete := TRUE;
				bMove:=FALSE;
			END_IF

		20:  //High Limit switch repitition test
			index:=1;
			nStep:=nStep+1;
			
		21: //High Limit switch repitition test
			bTestComplete := FALSE;
			bError:=FALSE;
			fTargetPosition := fEndPosition;
			bMove:= TRUE;
			IF fbAxisMoveAbsolute.Active OR (axis.NcToPlc.ActPos >= fEndPosition-fPositionDelta)THEN
				bMove:=FALSE;
				nStep:=nStep+1;
			END_IF
		22: // wait until the stage is at the end position
		  IF (*fbAxisMoveAbsolute.Done AND*) tWait.Q (*(axis.Status.InTargetPosition)*) OR NOT fbAxisPower.Enable_Positive  THEN
				fTargetPosition := fEndPosition - fPositionInc;
				aPosLimFwd[index]:= rActPosLimFwd;
				aEncLimFwd[index]:= rEncPosLimFwd;
				index:=index+1;
				nStep:=nStep+1;
				bMove:=FALSE;
			END_IF
		23: //Activate move
			bMove:= TRUE;
			IF fbAxisMoveAbsolute.Active THEN
				bMove:=FALSE;
				nStep:=nStep+1;	
			END_IF
		24: // wait until the stage is at the end position
		  IF (*fbAxisMoveAbsolute.Done AND*) tWait.Q (*(axis.Status.InTargetPosition)*) OR NOT fbAxisPower.Enable_Positive THEN
				fTargetPosition := fEndPosition;
				if (index<=5) THEN nStep:=21; ELSE IF NOT(bRunAll) THEN nStep:=0; ELSE nStep:=30; END_IF END_IF
				bMove:=FALSE;
			END_IF
		
			
			
		30: // Low Limit Switch rep
			index:=1;
			nStep:=nStep+1;
			
		31: //Low Limit switch repitition test
			bTestComplete := FALSE;
			bError:=FALSE;
			fTargetPosition := fStartPosition;
			bMove:= TRUE;
			
			IF fbAxisMoveAbsolute.Active OR (axis.NcToPlc.ActPos <= fStartPosition+fPositionDelta)THEN
				bMove:=FALSE;
				nStep:=nStep+1;
			END_IF
		32: // wait until the stage is at the end position
		  IF (*fbAxisMoveAbsolute.Done AND*) tWait.Q (*(axis.Status.InTargetPosition)*) OR NOT fbAxisPower.Enable_Negative  THEN
				fTargetPosition := fStartPosition + fPositionInc;
				aPosLimBwd[index]:= rActPosLimBwd;
				aEncLimBwd[index]:= rEncPosLimBwd;
				index:=index+1;
				nStep:=nStep+1;
				bMove:=FALSE;
			END_IF
		33: //Activate move
			bMove:= TRUE;
			IF fbAxisMoveAbsolute.Active THEN
				bMove:=FALSE;
				nStep:=nStep+1;	
			END_IF
		34: // wait until the stage is at the end position
		  IF (*fbAxisMoveAbsolute.Done AND*) tWait.Q (*(axis.Status.InTargetPosition)*) OR NOT (fbAxisPower.Enable_Negative) THEN
				fTargetPosition := fEndPosition;
				if (index<=5) THEN nStep:=31; ELSE nStep:=0; END_IF
				bMove:=FALSE;
			END_IF
		
	
	END_CASE
	
tWait(In:= axis.Status.InTargetPosition, PT:=T#2S);
tTimeout(In:= (step = 3) OR (step =5), PT:=T#5S);


IF (tTimeout.Q ) OR (fbAxisMoveAbsolute.Error) THEN bError:=TRUE; step:=0; END_IF;	
axis.ReadStatus();
//fbAxisPower(Enable := bEnable);



// Saving limit switches positions
ftLimFwd(CLK:= fbAxisPower.Enable_Positive);
ftLimBwd(CLK:= fbAxisPower.Enable_Negative);

IF (ftLimFwd.Q) THEN
	rActPosLimFwd := axis.NcToPlc.ActPos ;
	rSetPosLimFwd := axis.NcToPlc.SetPos;
	rEncPosLimFwd := nEncoderCount;//axis.NcToPlc.ActPos ;
END_IF

IF (ftLimBwd.Q) THEN
	rActPosLimBwd := axis.NcToPlc.ActPos ;
	rSetPosLimBwd:= axis.NcToPlc.SetPos;
	rEncPosLimBwd := nEncoderCount;//axis.NcToPlc.ActPos ;
END_IF


// Saving Min and Max position diff
IF (axis.NcToPlc.PosDiff < rMinPosDiff) THEN rMinPosDiff := axis.NcToPlc.PosDiff; END_IF
IF (axis.NcToPlc.PosDiff > fMaxPosDiff) THEN fMaxPosDiff := axis.NcToPlc.PosDiff; END_IF
(*
fbScopeServerControl(
   sNetId:= '127.0.0.1.1.1',
   eReqState:= eReqState,
   sConfigFile:= 'C:\GitHub\Exit-Slits\Measurement Project\Scope Project1.tcscopex',
   sSaveFile:= 'C:\GitHub\Exit-Slits\FAT Scopes\test.svd',
   tTimeout:= t#5s,
   bBusy=>,
   bDone=>,
   bError=>,
   nErrorId=>);*)
 ]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>