<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="FB_Test" Id="{2de176e6-6bae-44e9-9f5f-0ebe69940477}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Test

VAR_IN_OUT
	axis: AXIS_REF;
END_VAR

VAR
	fbAxisMoveAbsolute: MC_MoveAbsolute;
	
	
	bMove: BOOL := FALSE;
	fTargetPosition: LREAL := 0;
	rActPosLimBwd_AirPitch: LREAL;
	rSetPosLimBwd_AirPitch: LREAL;
	step: INT;
END_VAR
VAR_INPUT
	fTargetVelocity: LREAL := 0.1;
	fPositionDelta:LREAL := 0.009;
END_VAR

VAR
	fOverride: LREAL := 100;
	bEnable: BOOL := FALSE;
	nStep: int := 0;
	nCount: int := 0;
END_VAR

VAR_INPUT
	fStartPosition: LREAL := 20;
	fEndPosition: LREAL := 25;
	nDivisions: int := 6;
END_VAR

VAR
	fPositionInc: LREAL;
END_VAR

VAR_IN_OUT
	fbAxisPower: MC_Power;
END_VAR

VAR
	tWait: TON;
	tTimeout: TON; //timeout
	bError:BOOL :=FALSE;
	bTestComplete:BOOL:=FALSE;
	rMinPosDiff: LREAL :=1000;
	fMaxPosDiff: LREAL:=-1000;
	
	rActPosLimFwd:LREAL; //save the actual motor position
	rActPosLimBwd:LREAL;
	
	rSetPosLimFwd:LREAL; //save the set motor position
	rSetPosLimBwd:LREAL;
	
	ftLimFwd :F_TRIG; //detect falling edge on the limit switch
	ftLimBwd :F_TRIG;
	
	nMotorLoad AT %I*: UINT; //default Info data 1
	nMotorCurrent AT %I*: UINT;//default info data 2
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[axis.ReadStatus();




fbAxisMoveAbsolute(
	Axis:= axis,
	Execute:= bMove,
	Position:= fTargetPosition,
	Velocity:= fTargetVelocity,
	Acceleration:= ,
	Deceleration:= ,
	Jerk:= ,
	BufferMode:= ,
	Options:= ,
	Done=> ,
	Busy=> ,
	Active=> ,
	CommandAborted=> ,
	Error=> ,
	ErrorID=> );
	
	
	CASE nStep OF
		
		0: 
			bEnable:=FALSE;
			bMove:=FALSE;
			nCount:=0;
			IF (nDivisions <> 0) THEN
				fPositionInc := (fEndPosition -fStartPosition) /nDivisions;
			END_IF
			 

		1:
			bTestComplete := FALSE;
			bError:=FALSE;
			bEnable:= TRUE;
			IF (fbAxisPower.Status) THEN
				nStep:=nStep+1;
			END_IF;
			
			
		2:
			fTargetPosition := fStartPosition;
			bMove:= TRUE;
			nStep:=nStep+1;
			IF fbAxisMoveAbsolute.Active THEN
				bMove:=FALSE;
				nStep:=nStep+1;
			END_IF
			
		3:
			IF (*fbAxisMoveAbsolute.Done AND*) tWait.Q (*(axis.Status.InTargetPosition)*) THEN
				fTargetPosition := fbAxisMoveAbsolute.Position + fPositionInc;
				nStep:=nStep+1;
				bMove:=FALSE;
				IF ( fTargetPosition > fEndPosition )  THEN 
				fTargetPosition:= fEndPosition;
				END_IF
			END_IF
			IF (axis.NcToPlc.ActPos >= fEndPosition-fPositionDelta) THEN 
					nStep:=5;
			END_IF
			//IF (fbAxisMoveAbsolute.Error) THEN
			//	nStep:=999;
			//END_IF
		
		4:
			bMove:= TRUE;
			IF fbAxisMoveAbsolute.Active THEN
				bMove:=FALSE;
				nStep:=3;	
			
			END_IF
		
			
		5:
			IF (*fbAxisMoveAbsolute.Done AND*) tWait.Q (* (axis.Status.InTargetPosition)*) THEN
				fTargetPosition := fbAxisMoveAbsolute.Position - fPositionInc;
				nStep:=nStep+1;
				bMove:=FALSE;
				IF ( fTargetPosition < fStartPosition )  THEN 
				fTargetPosition:= fStartPosition;
				END_IF
			END_IF
			IF (axis.NcToPlc.ActPos <= fStartPosition+fPositionDelta) THEN
				nStep:=0;
				bTestComplete := TRUE;
			END_IF
		
		6:
			bMove:= TRUE;
			IF fbAxisMoveAbsolute.Active THEN
				bMove:=FALSE;
				nStep:=5;	
			END_IF
		
	
	
	END_CASE
	
tWait(In:= axis.Status.InTargetPosition, PT:=T#2S);
tTimeout(In:= (step = 3) OR (step =5), PT:=T#5S);


IF (tTimeout.Q ) OR (fbAxisMoveAbsolute.Error) THEN bError:=TRUE; step:=0; END_IF;	
axis.ReadStatus();
//fbAxisPower(Enable := bEnable);



// Saving limit switches positions
ftLimFwd(CLK:= fbAxisPower.Enable_Positive);
ftLimBwd(CLK:= fbAxisPower.Enable_Negative);

IF (ftLimFwd.Q) THEN
	rActPosLimFwd := axis.NcToPlc.ActPos ;
	rSetPosLimFwd := axis.NcToPlc.SetPos;
END_IF

IF (ftLimBwd.Q) THEN
	rActPosLimBwd_AirPitch := axis.NcToPlc.ActPos ;
	rSetPosLimBwd_AirPitch := axis.NcToPlc.SetPos;
END_IF


// Saving Min and Max position diff
IF (axis.NcToPlc.PosDiff < rMinPosDiff) THEN rMinPosDiff := axis.NcToPlc.PosDiff; END_IF
IF (axis.NcToPlc.PosDiff > fMaxPosDiff) THEN fMaxPosDiff := axis.NcToPlc.PosDiff; END_IF
 ]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>